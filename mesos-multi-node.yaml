heat_template_version: 2016-04-08

description: >
  Heat Template to create a Mesos DC/OS cluster

parameters:
  num_instances:
    type: number
    description: The number of Agent nodes to create. Default is 2.
    default: 2
  bootstrap_flavor:
    type: string
    description: The flavor to use to boot the VM
    default: mesos.bootstrap
  master_flavor:
    type: string
    description: The flavor to use to boot the VM
    default: mesos.master
  agent_flavor:
    type: string
    description: The flavor to use to boot the VM
    default: mesos.agent
  image:
    type: string
    description: The image to use, defaults to CentOS
    default: centos7-software-config
  ssh_key:
    type: string
    default: balduf-hlaptop
  sec_groups:
    type: string
    default: default
  network:
    type: string
    default: admin_net
  bootstrap_root_size:
    type: number
    default: 60
  master_root_size:
    type: number
    default: 120
  agent_root_size:
    type: number
    default: 60

resources:
  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name:
        list_join:
          - '-'
          - - { get_param: 'OS::stack_name' }
            - "keypair"
      save_private_key: true

  insert_ssh_key:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: private_key
      - name: user
      config: |
        #!/usr/bin/bash
        echo $private_key > /home/$user/.ssh/id_rsa.raw 
        echo '-----BEGIN RSA PRIVATE KEY-----' > /home/$user/.ssh/id_rsa
        sed 's/ /\n/g' /home/$user/.ssh/id_rsa.raw | sed -n 5,29p >> /home/$user/.ssh/id_rsa
        echo '-----END RSA PRIVATE KEY-----' >> /home/$user/.ssh/id_rsa
        chmod 600 /home/$user/.ssh/id_rsa /home/$user/.ssh/id_rsa.raw
        cp /home/$user/.ssh/id_rsa /root/.ssh
        chown $user.$user /home/$user/.ssh/id_rsa /home/$user/.ssh/id_rsa.raw

  deploy_insert_ssh:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: insert_ssh_key
      server:
        { get_attr: [ DCOS_bootstrap_group, resource.0.server ] }
      input_values:
        private_key: { get_attr: [ key_pair, private_key ] }
        user: "dcos"

  install_dcos:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: user
      - name: masters
      - name: agents
      - name: cluster_name
      config: |
        #!/usr/bin/bash
        su -c 'mkdir -p /home/$user/genconf' $user
        su -c 'cp /usr/local/bin/ip-detect.sh /home/$user/genconf/ip-detect' $user
        su -c 'cp /home/$user/.ssh/id_rsa /home/$user/genconf/ssh_key' $user
        cat << EOF > /home/$user/genconf/config.yaml
        ---
        exhibitor_storage_backend: static
        ip_detect_path: genconf/ip-detect
        master_discovery: static
        master_list: $masters
        bootstrap_url: file:///opt/dcos_install_tmp
        cluster_name: $cluster_name
        process_timeout: 10000
        #public_agent_list: $agents
        agent_list: $agents
        resolvers:
        - 172.27.1.251
        - 8.8.8.8
        - 8.8.4.4
        ssh_key_path: genconf/ssh_key
        ssh_port: 22
        ssh_user: $user
        telemetry_enabled: false
        EOF
        cd /home/$user
        # remove the unicode designator
        sed -i 's#u'\''#'\''#g' genconf/config.yaml
        su -c 'curl -O https://downloads.dcos.io/dcos/stable/dcos_generate_config.sh' $user
        bash dcos_generate_config.sh --genconf
        bash dcos_generate_config.sh --install-prereqs
        bash dcos_generate_config.sh --preflight
        bash dcos_generate_config.sh --deploy
        bash dcos_generate_config.sh --postflight

  deploy_dcos:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: install_dcos
      server:
        { get_attr: [ DCOS_bootstrap_group, resource.0.server ] }
      input_values:
        user: "dcos"
        masters: { get_attr: [ DCOS_master_group, public_ip ] }
        agents: { get_attr: [ DCOS_agent_group, public_ip ] }
        cluster_name: { get_param: 'OS::stack_name' }

  # I run this from the bootstrap node because the list resturned from a Heat
  # resource group needs ugly massaging to get it into the format for a 
  # SoftwareDeploymentGroup.  This is fixed in Newton, but this is to run on 
  # Mitaka for now.
  fix_agent_hostname:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: theagents
      config: |
        #!/usr/bin/bash
        cat << EOF > /tmp/agents.list
          $theagents
        EOF
        for ag in `sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g' $LIBRARY/agents.list`; do
          echo "Fixing Mesos Hostname: " $ag
          ssh -o StrictHostKeyChecking=no $ag 'PUBIP=$(curl -fsSL http://169.254.169.254/latest/meta-data/public-ipv4); \
                                               echo "MESOS_HOSTNAME=$PUBIP" >> /opt/mesosphere/etc/mesos-slave-common \
                                               reboot'
          sleep 30
        done

  deploy_fix_hostname:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: fix_agent_hostname
      server:
        { get_attr: [ DCOS_bootstrap_group, resource.0.server ] }
      input_values:
        theagents: { get_attr: [ DCOS_agent_group, private_ip ] }

  DCOS_bootstrap_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
          type: mesos-node.yaml
          properties:
            flavor: { get_param: bootstrap_flavor }
            image: { get_param: image }
            #ssh_key: { get_param: ssh_key }
            ssh_key:
              list_join:
                - '-'
                - - { get_param: 'OS::stack_name' }
                  - "keypair"
            sec_groups: { get_param: sec_groups }
            network: { get_param: network }
            root_size: { get_param: bootstrap_root_size }

  DCOS_master_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
          type: mesos-node.yaml
          properties:
            flavor: { get_param: master_flavor }
            image: { get_param: image }
            #ssh_key: { get_attr: [ deploy_gen_ssh, public_key ] }
            ssh_key:
              list_join:
                - '-'
                - - { get_param: 'OS::stack_name' }
                  - "keypair"
            sec_groups: { get_param: sec_groups }
            network: { get_param: network }
            root_size: { get_param: master_root_size }

  DCOS_agent_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: num_instances }
      resource_def:
          type: mesos-node.yaml
          properties:
            flavor: { get_param: agent_flavor }
            image: { get_param: image }
            #ssh_key: { get_attr: [ deploy_gen_ssh, public_key ] }
            ssh_key:
              list_join:
                - '-'
                - - { get_param: 'OS::stack_name' }
                  - "keypair"
            sec_groups: { get_param: sec_groups }
            network: { get_param: network }
            root_size: { get_param: agent_root_size }

outputs:
 bootstrap_ip:
    value: { get_attr: [ DCOS_bootstrap_group, public_ip] }
 master_ip:
    value: { get_attr: [ DCOS_master_group, public_ip] }
 agent_ips:
    value: { get_attr: [ DCOS_agent_group, public_ip] }
 public_key:
    value: { get_attr: [ key_pair, public_key ] }
